{"3_kyu":{"sudoku_solver.js":"function sudoku(puzzle) {\n  for (let y = 0; y < 9; y++) {\n    for (let x = 0; x < 9; x++) {\n      if (puzzle[y][x] == 0) {\n        const possibles = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n        \n        const row = puzzle[y];\n        const column = puzzle.map(r => r[x]);\n\n        const [gx, gy] = [x, y].map(n => Math.floor(n / 3) * 3);\n        const grid = puzzle.slice(gy, gy + 3).map(row => row.slice(gx, gx + 3)).reduce((a, b) => a.concat(b));\n        \n        const conflicts = [row, column, grid].reduce((a, b) => a.concat(b));\n        \n        conflicts.forEach((n) => {\n          const idx = possibles.indexOf(n);\n          if (idx != -1) possibles.splice(idx, 1);\n        });\n        \n        if (possibles.length == 1) {\n          puzzle[y][x] = possibles[0];\n          \n          y = 0;\n          x = -1;\n        };\n      };\n    };\n  };\n  \n  return puzzle;\n}","calculator.js":"const Calculator = function() {\n  this.evaluate = string => {\n    const numCheck = \"(-?\\\\d+\\\\.?\\\\d*e?\\\\+?-?\\\\d*)\";\n    const operatorChecks = [\" (\\\\*|\\\\/) \", \" (\\\\+|-) \"];\n    \n    operatorChecks.forEach((check) => {\n      while (string.search(new RegExp(check)) != -1) {\n        string = string.replace(new RegExp(numCheck + check + numCheck), (_, a, o, b) => {\n          [a, b] = [+a, +b];\n          switch (o) {\n            case '*': return a * b;\n            case '/': return a / b;\n            case '+': return a + b;\n            case '-': return a - b;\n          };\n        });\n      };\n    });\n    \n    return string;\n  };\n};\n"},"4_kyu":{"sudoku_solution_validator.js":"function validSolution(board) {\n  for (let i = 0; i < board.length; i++) {\n    const row = board[i];\n    const column = board.map(r => r[i]);\n    \n    const [x, y] = [Math.floor(i / 3) * 3, Math.floor(i / 3) * 3];\n    const grid = board.slice(y, y + 3).map(row => row.slice(x, x + 3)).reduce((a, b) => a.concat(b));\n    \n    for (let j = 1; j < 10; j++) {\n      if (!row.includes(j)) return false;\n      if (!column.includes(j)) return false;\n      if (!grid.includes(j)) return false;\n    };\n  };\n  \n  return true;\n}","strings_mix.js":"// This is terrible but not in the mood for refactoring atm\n\nfunction mix(s1, s2) {\n  const result = [];\n  \n  const charCounts = [s1, s2].map((s) => {\n    const charCount = {};\n    \n    for (let i = 0; i < s.length; i++) {\n      const charCode = s.charCodeAt(i);\n      \n      if (charCode >= 97 && charCode <= 122) {\n        charCount[s[i]] = (charCount[s[i]] || 0) + 1;\n      };\n    };\n    \n    return charCount;\n  });\n  \n  for (let i = 97; i <= 122; i++) {\n    const c = String.fromCharCode(i);\n    \n    const [c1, c2] = [(charCounts[0][c] || 0), (charCounts[1][c] || 0)];\n    \n    const max = Math.max(c1, c2);\n    \n    if (max > 1) {\n      const prepend = c1 == c2 ? '=' : c1 > c2 ? '1' : '2';\n      let append = \"\"\n      \n      for (let j = 0; j < max; j++) append += c;\n      \n      result.push(prepend + ':' + append);\n    }\n  }\n  \n  result.sort((a, b) => {\n    if (a.length == b.length) {\n      [a, b] = [a, b].map(s => s.replace(/(=|:)/g, ''));\n      return a.localeCompare(b);\n    }\n    \n    return b.length - a.length;\n  })\n  \n  \n  return result.join('/');\n}\n","sum_of_intervals.js":"function sumIntervals(intervals){\n  let nums = new Set();\n  \n  intervals.forEach((interval) => {\n    for (let j = interval[0]; j < interval[1]; j++) nums.add(j);\n  });\n  \n  return nums.size;\n};\n","range_extraction.js":"function solution(list) {\n  const result = [];\n  \n  for (let i = 0; i < list.length; i++) {\n    let rangeCount = 1;\n    \n    while(list[i] + rangeCount == list[i + rangeCount]) rangeCount++;\n    \n    if (rangeCount > 2) {\n      const range = list.slice(i, i + rangeCount + 1);\n      result.push(range[0] + '-' + range[rangeCount - 1]);\n      i += rangeCount - 1;\n    } else {\n      result.push(list[i]);\n    };\n  };\n  \n  return result.join(',');\n};\n","strip_comments.js":"function solution(input, markers) {\n  const regExp = new RegExp(`(\\\\${markers.join('|\\\\')}).*$`)\n  return input.split('\\n').map(s => s.replace(regExp, '').trim()).join('\\n');\n};\n","sum_strings_as_numbers.js":"function sumStrings(a, b) {\n  const arrLen = Math.max(a.length, b.length) + 1;\n  const sum = new Array(arrLen).fill(0);\n\n  const add = (n, i) => {\n    const added = n + sum[i] + '';\n    sum[i] = +added[added.length - 1];\n\n    if (added.length == 2) add(+added[0], i - 1);\n  }\n\n  [a, b] = [a, b].map(s => s.padStart(arrLen, '0'));\n\n  for (let i = a.length - 1; i >= 0; i--) {\n    add(+a[i] + +b[i], i);\n  };\n  \n  while (sum[0] == 0) sum.splice(0, 1);\n  \n  return sum.join('');\n};\n","human_readable_duration_format.js":"function formatDuration (seconds) {\n  const sentence = []\n  const units = [\n    ['year', 31536000],\n    ['day', 86400],\n    ['hour', 3600],\n    ['minute', 60],\n    ['second', 1]\n  ]\n  \n  for (let i = 0; i < units.length; i++) {\n    const [unit, value] = units[i];\n    \n    const quantity = Math.floor(seconds / value);\n    if (quantity >= 1) sentence.push(`${quantity} ${unit}${quantity > 1 ? 's' : ''}`);\n    seconds -= quantity * value;\n  }\n  \n  if (sentence.length == 0) {\n    return 'now'\n  } else if (sentence.length < 2) {\n    return sentence[0]\n  } else {\n    return [sentence.slice(0, -1).join(', '), sentence[sentence.length - 1]].join(\" and \"); \n  }\n}\n","sum_by_factors.js":"function sumOfDivided(lst) {\n  const primeCounts = {};\n  \n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    const arr = [];\n    \n    let divisor = 2;\n    let n = Math.abs(num);\n    \n    while (n >= 2) {\n      if (n % divisor == 0) {\n        if (!arr.includes(divisor)) arr.push(divisor);\n        n /= divisor;\n      } else {\n        divisor++;\n      };\n    };\n    \n    [...new Set(arr)].forEach(prime => primeCounts[prime] = (primeCounts[prime] || 0) + num);\n  };\n  \n  return Object.entries(primeCounts).map(arr => [+arr[0], arr[1]]);\n}","snail.js":"snail = function(array) {\n  const path = [];\n  \n  if (array[0].length > 0) {\n    const size = array.length\n    let nPad = 0;\n    let ePad = 0;\n    let sPad = 0;\n    let wPad = 0;\n    \n    while (nPad < 10) {\n      for (let x = wPad; x < size - ePad; x++) path.push(array[nPad][x]);\n      if (path.length == size ** 2) break;\n      nPad++;\n\n      for (let y = nPad; y < size - sPad; y++) path.push(array[y][size - ePad - 1]);\n      if (path.length == size ** 2) break;\n      ePad++;\n\n      for (let x = size - ePad - 1; x >= wPad; x--) path.push(array[size - sPad - 1][x]);\n      if (path.length == size ** 2) break;\n      sPad++;\n\n      for (let y = size - sPad - 1; y >= nPad; y--) path.push(array[y][wPad]);\n      if (path.length == size ** 2) break;\n      wPad++;\n    }\n  }\n  \n  return path;\n}","next_bigger_number_with_the_same_digits.js":"function nextBigger(n) {\n  const digits = n.toString().split('').map(num => parseInt(num));\n  \n  if (digits.join('') == digits.slice().sort().reverse().join('')) {\n    return -1;\n  } else {\n    for (let i = digits.length - 1; i >= 0; i -= 1) {\n      if (digits[i] > digits[i - 1]) {\n        const start = digits.slice(0, i - 1);\n        const end = digits.slice(i - 1);\n        \n        const first = Math.min(...end.filter(e => e > end[0]));\n\n        end.sort();\n        \n        end.unshift(end.splice(end.indexOf(first), 1)[0]);\n        \n        const num = parseInt(start.concat(end).join(''));\n\n        return num;\n      };\n    };\n  };\n};\n"},"8_kyu":{"even_or_odd.js":"const even_or_odd = number => number % 2 == 0 ? \"Even\" : \"Odd\";","area_or_perimeter.js":"const areaOrPerimeter = function(l , w) {\n  return l == w ? l * w : (l + w) * 2;\n};","multiply.rb":"def multiply(a, b)\n  a * b\nend"},"5_kyu":{"double_cola.js":"function whoIsNext(names, r){\n  const counts = names.map(n => [n, 1]);\n  \n  for (let i = 0; i < r;) {\n    i += counts[0][1];\n    counts[0][1] *= 2;\n    counts.push(counts.shift());\n  }\n  \n  return counts[counts.length - 1][0];\n}\n","directions_reduction.js":"function dirReduc(arr){\n  for (let i = 0; i < arr.length - 1; i++) {\n    const [a, b] = [arr[i], arr[i + 1]].sort();\n\n    if (\n      (a == \"NORTH\" && b == \"SOUTH\") \n      || (a == \"EAST\" && b == \"WEST\")\n    ) {\n      arr.splice(i, 2); // remove the two elements from the array\n      i -= 2; // sets i the previous element's index for the next iteration\n    };\n  };\n  \n  return arr;\n}","int32_to_i_pv4.js":"function int32ToIp(int32) {\n  const bitString = int32.toString(2).padStart(32, '0');\n  \n  const ip = [];\n  \n  for (let i = 0; i < 4; i ++) ip.push(parseInt(bitString.slice(i * 8, i * 8 + 8), 2));\n  \n  return ip.join('.');\n}\n"},"6_kyu":{"custom_christmas_tree.js":"function customChristmasTree(chars, n) {\n  let tree = [];\n  let charIndex = 0;\n  \n  for (let i = 0; i < n; i++) {\n    let row = [];\n\n    for (let k = 0; k < i + 1; k++) {\n      row.push(chars[charIndex % chars.length]);\n      charIndex++;\n    };\n\n    tree.push(row.join(\" \").padStart(n * 2 - n + i, \" \"));\n  }\n  \n  for (let i = 0; i < 1 + Math.floor((n - 3) / 3); i++) tree.push(\"|\".padStart((n * 2) / 2, \" \"));\n  \n  return tree.join(\"\\n\");\n}","counting_duplicates.js":"function duplicateCount(text) {\n  const counts = {};\n  \n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) counts[text[i]] = (counts[text[i]] || 0) + 1;\n\n  return Object.values(counts).filter(n => n > 1).length;\n}\n","replace_with_alphabet_position.js":"function alphabetPosition(text) {\n  let result = \"\";\n  \n  text = text.toLowerCase();\n  \n  for (let i = 0; i < text.length; i++) {\n    const charCode = text.charCodeAt(i);\n    \n    if (charCode >= 97 && charCode <= 122) result += \" \" + (charCode - 96);\n   };\n  \n  return result.slice(1);\n}","sums_of_parts.js":"function partsSums(ls) {\n  const sums = [];\n\n  sums[0] = ls.length > 0 ? ls.reduce((a, b) => a + b) : 0;\n  \n  for (let i = 0; i < ls.length; i++) {\n    sums.push(sums[sums.length - 1] - ls[i]);\n  }\n  \n  return sums;\n}","crack_the_pin.js":"const crypto = require('crypto');\n\nfunction crack(hash) {\n  for (let i = 0; i < 100000; i++) {\n    const pin = (\"\" + i).padStart(5, '0');\n    \n    if (crypto.createHash('md5').update(pin).digest('hex') === hash) {\n      return pin;\n    }\n  }\n}","longest_alphabetical_substring.js":"function longest(str) {\n  let longestString = '';\n  let currentString = '';\n  \n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= str[i - 1]) {\n      currentString += str[i];\n    } else {\n      currentString = str[i];\n    }\n    \n    if (currentString.length > longestString.length) {\n      longestString = currentString;\n    }\n  }\n  \n  return longestString;\n}"},"7_kyu":{"jaden_casing_strings.js":"String.prototype.toJadenCase = function () {\n  const words = this.split(' ').map(word => word[0].toUpperCase() + word.slice(1));\n  \n  return words.join(' ');\n};","exes_and_ohs.js":"function XO(str) {\n  str = str.toLowerCase();\n  \n  let xCount = 0;\n  let oCount = 0;\n  \n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    \n    if (char == 'x') {\n      xCount ++;\n    } else if (char == 'o') {\n      oCount ++;\n    }\n  }\n  \n  return xCount == oCount;\n}","sum_of_two_lowest_positive_integers.js":"function sumTwoSmallestNumbers(numbers) {  \n  const smallestNumbers = numbers.sort((a, b) => a - b).slice(0, 2);\n  \n  return smallestNumbers.reduce((a, b) => a + b);\n}"}}